-- @nsURI SCENARIO=http://demobuilder.scenario.metamodel
-- @nsURI AGREEMENT=http://demobuilder.agreement.metamodel


module scenario2agreementCompositor;
create OUT: AGREEMENT from IN: SCENARIO;

-- HELPERS
helper def: SLO_var: AGREEMENT!SLO =
	OclUndefined;

rule Scenario2AgreementCompositor {
	from
		scenario: SCENARIO!Scenario
	to
		agCompositor: AGREEMENT!AgreementCompositor (
			agreements <- SCENARIO!PricingPlan.allInstances() -> collect(pricingPlan | thisModule.
					pricingPlan2AgreementModel(pricingPlan))
		)
}

lazy rule pricingPlan2AgreementModel {
	from
		IN: SCENARIO!PricingPlan
	to
		agModel: AGREEMENT!AgreementModel (
			id <- IN.name,
			version <- 1,
			"context" <- agContext,
			agTerm <- agTerm
		),
		agContext: AGREEMENT!Context (
			actors <- thisModule.ServiceOffer2ActorProvider(IN.serviceOffer),
			metrics <- agContext.metrics -> including(agMetric_boolean) ->
					including(agMetric_int) -> including(agMetric_float) ->
					including(agMetric_natural)
		),
		agTerm: AGREEMENT!AgreementTerm (
			guaranteeTerms <- IN.pricingPlanElements -> collect(pe | if not pe.
					SLOExpression.oclIsUndefined() then
						thisModule.PricingPlanElement2GuaranteeTerm(pe)
					else
						OclUndefined
					endif),
			monitorableProperties <- thisModule.ServiceOffer2MonitorableProperty(IN.
					serviceOffer),
			serviceConfigurarion <- thisModule.ServiceOffer2ServiceConfiguration(IN.
					serviceOffer)
		),
		agMetric_boolean: AGREEMENT!Metric (
			domain <- OclUndefined,
			id <- 'boolean',
			type <- #BOOLEAN
		),
		agMetric_int: AGREEMENT!Metric (
			domain <- agMetricDomain_int,
			id <- 'int',
			type <- #INTEGER
		),
		agMetric_float: AGREEMENT!Metric (
			domain <- agMetricDomain_float,
			id <- 'float',
			type <- #FLOAT
		),
		agMetric_natural: AGREEMENT!Metric (
			domain <- agMetricDomain_natural,
			id <- 'natural',
			type <- #NATURAL
		),
		agMetricDomain_int: AGREEMENT!Range (
			min <- -9999999,
			max <- 9999999
		),
		agMetricDomain_float: AGREEMENT!Range (
			min <- -9999999,
			max <- 9999999
		),
		agMetricDomain_natural: AGREEMENT!Range (
			min <- 0,
			max <- 9999999
		)
	do {
		Sequence{agModel}; 
	}
}

-- LAZY RULES
lazy rule PricingPlanElement2GuaranteeTerm {
	from
		IN: SCENARIO!PricingPlanElement
	to
		agGuaranteeTerm: AGREEMENT!GuaranteeTerm (
			id <- 'G_',
			qualifyingCondition <- agQualifyingCondition,
			role <- OclUndefined,
			slo <- agSLO,
			compensations <- agCompensation
		),
		agCompensation: AGREEMENT!Compensation (
			interval <- IN.compensationInterval,
			type <- IN.compensationType,
			compensationElements <- agCompensationElement
		),
		agCompensationElement: AGREEMENT!CompensationElement (
			condition <- IN.compensationCondition,
			expression <- IN.compensationExpression
		),
		agQualifyingCondition: AGREEMENT!QualifyingCondition (
			expression <- IN.qualifyingCondition
		),
		agSLO: AGREEMENT!SLO (
			expression <- IN.SLOExpression
		)
	do {
		thisModule.SLO_var <- agGuaranteeTerm.slo;
	}
}

lazy rule ServiceOffer2ServiceConfiguration {
	from
		IN: SCENARIO!ServiceOffer
	to
		agServiceConfiguration: AGREEMENT!ServiceConfiguration (
			configurationProperties <- agServiceConfiguration.configurationProperties ->
					including(agConfigurationProperty),
			definitionReference <- OclUndefined,
			endpointReference <- IN.serviceEndpoint,
			features <- OclUndefined,
			monitorReference <- OclUndefined,
			serviceName <- IN.name
		),
		agConfigurationProperty: AGREEMENT!ConfigurationProperty (
			definitionReference <- OclUndefined,
			expression <- OclUndefined,
			features <- OclUndefined,
			id <- OclUndefined,
			scope <- OclUndefined
		)
	do {
	}
}

lazy rule ServiceOffer2MonitorableProperty {
	from
		IN: SCENARIO!ServiceOffer
	to
		monitorableProperties: AGREEMENT!MonitorableProperty (
			definitionReference <- OclUndefined,
			expression <- OclUndefined,
			features <- OclUndefined,
			id <- 'M_',
			monitorReference <- OclUndefined,
			scope <- OclUndefined
		)
	do {
	}
}

lazy rule ServiceOffer2ActorProvider {
	from
		IN: SCENARIO!ServiceOffer
	to
		agActor: AGREEMENT!Actor (
			id <- IN.serviceLink.actor.name,
			role <- #PROVIDER,
			roleType <- #RESPONDER
		)
	do {
	}
}

lazy rule ServiceOffer2Feature {
	from
		IN: SCENARIO!ServiceOffer
	to
		agFeature: AGREEMENT!Feature (
			id <- OclUndefined,
			parameters <- agFeature.parameters -> including(agParameter)
		),
		agParameter: AGREEMENT!Parameter (
			name <- OclUndefined
		)
	do {
	}
}
